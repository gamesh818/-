# CSS

### 1.介绍一下CSS的盒子模型

- 标准盒子模型

![](E:\github仓库\Study-the-warehouse\面试题学习\img\标准盒子模型.jpg)

- IE盒子模型

![](E:\github仓库\Study-the-warehouse\面试题学习\img\IE盒子模型.jpg)

```js
CSS的盒子模型有哪些： 标准盒子模型、IE盒子模型

CSS的盒子模型的区别：
	标准盒子模型：margin、border、padding、content
	IE盒子模型：margin、content（包含boder+padding+content）

如何通过CSS转换盒子模型：
	box-sizing：content-box  // 默认标准版盒子模型
	box-sizing: border-box  // IE盒子模型
```



### 2. line-height 和 height的区别

```css
height是一个死值，就是这个盒子的高度。
line-height是每一行文字的高度值，文字换行盒子高度会增加（行数*行高）

```



### 3. Css选择符有哪些？哪些属性可以继承？

```css
CSS选择符：
通配符（*）
id选择器（#）
类选择器（.）
标签选择器（div、p、li、...）
相邻选择器（+）
后代选择器（ul li） [ul和li之间是空格]
子元素选择器(>)
属性选择器（a[xxx]）   [xxx]中的是标签内的属性 类似vue的 v-date-xxx


哪些属性可以继承：
	文字系列：font-size、color、line-height、text-align...
哪些不能继承：border、margin、padding...
```



### 4.CSS优先级算法如何计算？

```css
- 优先级比较：
!important>内联样式(标签里写style)>id选择器(#id)>类选择器(.class)>标签选择器(div、h1)>统配符选择器(*)>子选择器(ul<li)>后代选择器(ul空格li)>伪类选择器(a:hover,li:nth-child)>继承得来的属性

- css权重算法：
1.内联样式(style)	权重：1000
2.id选择器			权重：100
3.类选择器			权重：10
4.标签&伪类元素选择器 权重：1
5.统配(*)、>、+		权重：0

例子:
1  1    10  = 12
ul li .list1{
	background:blue;    
}
  10   = 10
.list1{
	background:red;    
}

12 > 10 权重值高就会覆盖

```



### 5.用CSS画一个三角形

```css
使用边框(border)画

div{
    width:0;
    height:0;
    /*哪个方向需要为三角形的底 就在哪个方向给颜色*/
    border-top:100px solid #ccc;
    border-bottom:100px solid tansparent;
    border-left:100px solid tansparent;
    border-right:100px solid tansparent;
        
}


宽高设为0，把左上右边框颜色都设置为透明，然后bottom给一个尺寸
```



### 6.一个盒子不给宽高如何水平居中

```css
<div class='container'>
	<div class='main'> main </div>
</div>
 

/*方法一：flex方式 */
关键代码： display:flex;  justify-content:center(主轴方向); align-items:center(侧轴方向);
        .container{
            width: 500px;
            height: 500px;
            border: 1px solid #ccc;

            display:flex;
            justify-content:center;
            align-items:center;
        }
        .main{
            background:red
        }

/*方拾二：定位方式配合transform:translate*/
        .container{
            width: 500px;
            height: 500px;
            border: 1px solid #ccc;

            position: relative;
        }
        .main{
            background:red;
            position: absolute;
            top: 50%;
            left: 50%;
            transform:translate(-50%,-50%)
        }

```





### 7.display有哪些值？说明他们的作用

```
1.none; 		隐藏元素
2.block; 		把某元素转化为块元素
3.inline; 		把某元素转化为行内元素
4.inline-block; 把某元素转化为行内块元素
```





### 8.对BFC的理解（块级格式化上下文）

```js
BFC就是一个隔离的独立容器，容器里面的元素不会影响到外面的元素。

1.了解BFC： 块级格式化上下文
2.BFC原则： 如果一个元素具有BFC，那么内部元素再怎么弄也不会影响外面的元素。
3.如何触发BFC：
	- float(浮动)的值非none
	- overflow的值非visible
	- display的值为： inline-block、table-cell...

4.应用场景
	// 1. 防止margin重叠（塌陷）  
	 -原因： maring发生重叠是因为同一个BFC的两个相邻的盒子maring会发生重叠
	 -解决方案： 在另一个元素外再包裹一层容器，形成新的BFC，则两个盒子不属于同一个BFC，就不会出现margin重叠。
	// 2.清除内部浮动
	 -原因： 浮动的元素脱离文档流，在父盒子中不会计算高度。
     -解决方案： 给父元素添加overfolw：hidden；触发BFC，BFC计算高度时，浮动元素也会参与。
	// 3.自适应多栏布局
	 -原因： 自适应多栏布局可以使用一个浮动元素，一个块元素一左一右布局。而浮动的元素脱离文档流，会与块元素重叠，无法形成多栏布局。
     -解决方案： 给父元素添加overflow：hidden；触发BFC，而BFC区域不会与浮动元素重叠，而块元素则获得除浮动元素以外的宽度，也会因为浏览器大小而自适应宽度。

```



### 9.清除浮动有哪些方式？

```css
1.触发BFC (overflow:hindden)
2.多创建一个盒子，添加clear:both；
3.*重要* 加一个after伪类元素 
ul:after{
    content:'';
    display:block.;
    clear:both;
}
```



### 10.在网页中应该使用奇数还是偶数的字体？为什么？

```
- UI设计图，一般设计时候使用偶数，布局方便，转化px也方便
- 偶数 让文字在浏览器上表现更好看
```



### 11.position（定位）有哪些值？分别是根据什么定位的？

```
static [默认值]	 没有定位
fixed  [固定定位]	相对于浏览器窗口进行定位
relative [相对定位]	相对于自身定位
absolute [绝对定位] 相对于第一个有relative的父元素，脱离文档流

relative和absolute的区别
1.relative不脱离文档流，absolute脱离文档流
2.relative相对于自身，absolute相对于第一个有relative的父元素
3.relative如果有 left、right、top、bottom  只能存在left、top  （有left不能有right，有top不能有bottom）
  absolute都能存在

```



### 12.响应式

```css
一个url响应多端

语法：@emdia only screen and (条件 max-width) {代码块}
only:可以排除不支持媒体查询的浏览器
screen:设备类型
max-width | max-height | min-width | min-height

当屏幕小于1000的时候 隐藏最后一个元素
@emdia only screen and (条件 max-width:1000px){
	ul li:last-child{
		display:none;
	}
}

```





# H5

### 1. 什么是语义化标签

比如以下标签：

```html
<header></header>
<footer></footer>
<section></section>
<button></button>
<nav></nav>
...
```

```js
1.易读性与维护性更高。
2.SEO成分更好，方便SEO抓取关键词。
3.IE8不兼容HTML5标签。解决方案：可以通过html5shiv.js进行处理。
```

### 2. ::before和::after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用

##### 1.区别：

- :是伪类
- ::是伪元素
  - 单冒号与双冒号 是为了区分

##### 2.作用：

- before：元素之前
- after：元素之后
- 可以用来清除浮动，样式布局上也有作用



### 3.怎么让Chrome支持小于12px的文字

```css
- Chrome字体大小默认为16px
- ** 每个浏览器的字体默认大小可能不一样 **

- 可以使用缩放 -webkit-transform:scale(缩放倍率 默认1.0) 进行缩放字体大小
- 但是 只是缩放了一个盒子，不是真正意味上的字体大小缩小
```



### 4.行内元素有哪些？块级元素有哪些？空(void)元素有哪些？

- 行内元素： span、img、input...
- 块级元素：	div、footer、header、section、p、h1-h6...
- 空元素：	 br、hr

```
衍生问题：元素之间的转换？

- 把某元素转化为块元素：
  - display:block; 			===》 独占一行 可以设置宽高
- 把某元素转化为行内元素：
  - display:inline;   		===》 不独占一行 不能设置宽高
- 把某元素转化为行内块元素：
  - display:inline-block;   ===》 不独占一行 可以设置宽高

```



### 5. 页面导入样式时，使用link 和 @import有什么区别？

```
区别一： link先创造 后创造@import  （兼容性link比@import兼容）
区别二*： 加载顺序的区别 浏览器先加载的是标签link，后加载@import
```



### 6. title与h1的区别、b与strong的区别、i与em的区别？

```
title与g1的区别：
	定义：
		- title：概况了网站信息，可以告诉搜索引擎或用户关于这个网站的内容主题是什么
		- h1：	文章的主题内容，告诉蜘蛛我们的网站内容最主要的是什么
	区别：
		- title：显示在网页标题上，在SEO上的优先级比h1更高
		- h1：	显示在网页内容上，在SEO上的优先级比title低
		
	场景：网站的logo都是用h1包裹的

b与strong的区别：
	定义：
	 	- b：	 实体标签，用来给文字加粗的
	 	- strong：逻辑标签，用来加强字符语气的
	区别：
		- b：只有加粗的样式，没有实际含义
		- strong：表示标签内的字符比较重要，用于强调
	
	为了符合css3的规范，b尽量少用，用strong就行了

i与em的区别：
	定义：
		- i：实体标签，用来做文字倾斜
		- em：逻辑标签，用来强调文字内容
	区别：
		- i：只是一个倾斜标签，没有实际含义
		- em：表示标签内字符重要，用来强调
	场景：
		- i更多用在字体图标上
		- em更多用在专业术语上
		
```

 

### 7. img标签的title和alt有什么区别？

```
区别一：
	title	：鼠标移入到图片后显示的值
	alt		：图片无法加载时显示的值
区别二：
	在SEO的层面，蜘蛛抓取不到图片的内容，所以前端在在img标签时，为了增加seo效果，需要加入alt属性来描述这张图是什么内容或者关键词。
```



### 8. png、jpg、gif 这些图片格式解释一下，分别什么时候用？

```
png：无损压缩，清晰度更高，尺寸要比jpg/jpeg更大，适合做小图标。
jpg：采用压缩算法，清晰度比png稍差，但体积比png更小，适合用中大型的图片使用。
gif：一般是做动图。
webp：同时支持有损或无损压缩，相同质量的图片，webp具有更小的体积。兼容性不是很好。
```







# JS

### 1.延迟加载JS有哪些方式？

```js
1.js脚本放在文档的底部，来使js脚本尽可能的在最后来加载执行
2.在script标签中 添加async 或 defer （仅适用于script）
	async：不让页面等待下载，从而异步加载页面其他内容
	defer：在html已加载后才运行js


async 与 befer 的区别
1.async 与html解析同步的，所有js文件谁先加载完谁先执行。
2.defer 等html解析完成后，才会顺次执行js脚本
```

### 2.JS数据类型有哪些

```js
基本类型：string、number、boolean、undefined、null、symbol、bigint

引用类型：object
```



### 3.null与undefined的区别







### 4.微任务和宏任务

```
1.js是单线程语言


2.同步代码 ===> 异步代码（微任务 ===> 宏任务）




```

1. ### promise的几个API

promise.resolve(1)

promise.reject(1)

promise.all([promise1,promise2,promise3])

promise.race([promise1,promise2,promise3])

1. promise的三个状态
   pending，表示进行中

fulfilled也是resolved，表示成功

rejected，表示失败

### 2.promise的状态变化

只能从pending->resolved或者pending->rejected

promise的状态改变后就不会再次改变会一直保持这个状态，而且promise不会受到外界的影响，只会受到异步操作的结果的影响

### 3.promise的基本用法

new Promise((resolve,reject)=>{
				if(true){
					resolve(value);
				}else{
					reject(err);
				}
			}).then(
				value=>{};
				reason=>{};
			).catch(
			)
新建一个promise构造函数，函数接受一个函数作为参数，同时该函数有两个参数，reject和resolve

执行异步操作

成功执行resolve()，状态变成resolved状态

失败执行reject()，状态变成rejected状态

无论成功还是失败都可以通过.then()指定成功和失败的回调函数，catch只能调用失败的回调函数

promise是同步执行，then是异步执行

### 5.JS中的同步与异步

- 同步就是指放在主线程中执行的任务，只有主线程中上一个任务执行完毕才执行下一个同步任务

- 异步不是在主线程中执行，而是将其放在任务队列中执行，只有等到主线程执行完毕，任务队列中的任务才放入主线程执行

- 而比较重要的一点是任务队列又分为宏队列和微队列

- executor是promise的执行器函数，是同步执行的函数，也就是说promise是同步，而promise的回调函数是异步

### 6.宏队列和微队列

- 宏队列：用来保存待执行的宏任务，，比如定时器、DOM回调、ajax回调。

- 微队列：用来保存待执行的微任务，比如：promise的回调/mutationObserver的回调。

- 执行顺序：每次取出宏任务之前要先把微任务全部取出来放到栈里面处理掉，然后再执行宏任务





























# Vue



### 1.谈谈你对MVVM的理解

MVC:  **Model（模型）、View（视图）和Controller（控制）**

MVVM：**Model（模型）-View（视图）-ViewModel（视图模型）**

- 比较早期的是MVC针对于后端
  - 页面操作 -> 后端路由 -> 控制器 -> 数据获取 -> 控制器 -> 回传页面
- 如果前端也使用MVC方式的话，会把逻辑大量堆积耦合在 C（控制器）中，会导致维护困难。
- 所以改进了MVC方式，出现了MVVM，由ViewModel分离出大部分Controller代码，更佳清晰和容易维护。
- MVVM采用双向绑定，ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。















































